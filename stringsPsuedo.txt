int __cdecl main(int argc, const char **argv, const char **envp)
{
  const char **v3; // r15
  int v4; // ebx
  signed __int64 v5; // rax
  signed __int64 v6; // rsi
  signed __int64 v7; // rdx
  signed __int64 v8; // rdx
  int v9; // ecx
  signed __int64 v10; // rdx
  char *v11; // rax
  signed __int64 v12; // rdx
  signed __int64 v13; // rax
  signed __int64 v14; // rax
  signed __int64 v15; // rax
  int v16; // eax
  signed __int64 v17; // rax
  signed __int64 v18; // rax
  signed __int64 v19; // rax
  __int64 v20; // r15
  char v21; // bl
  signed int v22; // edi
  signed __int64 v23; // rax
  signed int v24; // et1
  int v25; // esi
  unsigned int v26; // edi
  bool v27; // r8
  signed __int64 v28; // rax
  signed int v29; // et1
  char *v30; // rax
  signed __int64 v31; // rcx
  int v32; // eax
  signed __int64 v33; // rax
  signed __int64 v34; // rax
  signed __int64 v35; // rax
  signed int v36; // et1
  char *v37; // rax
  signed __int64 v38; // rcx
  signed int v39; // et1
  int v40; // ecx
  signed __int64 v41; // rax
  signed __int64 v42; // rax
  signed int v43; // et1
  signed int v44; // et1
  signed int v45; // et1
  signed int v46; // et1
  signed int v47; // et1
  int v48; // esi
  signed __int64 v49; // rax
  signed __int64 v50; // rax
  signed __int64 v51; // rax
  unsigned __int64 v52; // rcx
  signed __int64 v53; // rax
  signed __int64 v54; // rax
  signed __int64 v55; // rax
  signed int v56; // eax
  signed __int64 v57; // rax
  signed __int64 v58; // rdx
  signed __int64 v59; // rcx
  char *v60; // r9
  int v61; // eax
  signed __int64 v62; // rcx
  int v63; // er12
  signed int v64; // er14
  signed __int64 v65; // rax
  signed __int64 v66; // rax
  signed __int64 v67; // rax
  signed int v68; // er15
  signed int v69; // et1
  char *v70; // rbp
  signed __int64 v71; // rcx
  signed __int64 v72; // rax
  signed __int64 v73; // rax
  signed __int64 v74; // rax
  bfd_0 *v75; // rbx
  signed __int64 v76; // rax
  signed __int64 v77; // rax
  signed int v78; // et1
  signed __int64 v79; // rcx
  signed __int64 v80; // rax
  signed __int64 v81; // rax
  signed __int64 v82; // rax
  FILE *v83; // rbx
  char *v84; // r9
  signed __int64 v85; // rax
  signed int v86; // et1
  signed __int64 v87; // rcx
  signed __int64 v88; // rax
  signed __int64 v89; // rax
  int result; // eax
  signed __int64 v91; // rax
  signed __int64 v92; // rax
  signed __int64 v93; // rax
  signed __int64 v94; // rax
  char *v95; // rax
  signed __int64 v96; // rax
  char *v97; // rax
  signed __int64 v98; // rax
  signed __int64 v99; // rax
  signed __int64 v100; // rax
  signed __int64 v101; // rax
  int v102; // [rsp+Ch] [rbp-3Ch]
  const char **v103; // [rsp+10h] [rbp-38h]

  v3 = argv;
  v4 = argc;
  v5 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xAC96LL;
  ++_fot_area_ptr[v5];
  __writefsdword(0xFFFFFFFC, 0x564Bu);
  setlocale(6, "");
  bindtextdomain("binutils", "/usr/local/share/locale");
  textdomain("binutils");
  program_name = (char *)*argv;
  xmalloc_set_program_name(program_name);
  string_min = -1;
  print_addresses = 0;
  print_filenames = 0;
  datasection_only = 1;
  target = 0LL;
  encoding[0] = 115;
  v103 = argv;
  v102 = argc;
  while ( 2 )
  {
    v15 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x79CBLL;
    ++_fot_area_ptr[v15];
    __writefsdword(0xFFFFFFFC, 0x3CE5u);
    v16 = getopt_long(v4, (char *const *)v3, "afhHn:ot:e:Vv0123456789", long_options, 0LL);
    switch ( v16 + 1 )
    {
      case 0:
        v49 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x86BBLL;
        ++_fot_area_ptr[v49];
        __writefsdword(0xFFFFFFFC, 0x435Du);
        if ( string_min < 0 )
        {
          v50 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xA03ALL;
          ++_fot_area_ptr[v50];
          __writefsdword(0xFFFFFFFC, 0x501Du);
          string_min = 4;
        }
        v51 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xB32LL;
        ++_fot_area_ptr[v51];
        __writefsdword(0xFFFFFFFC, 0x599u);
        v52 = (unsigned int)(encoding[0] - 66);
        if ( (unsigned int)v52 > 0x31 )
          goto LABEL_80;
        v53 = 1025LL;
        if ( _bittest64(&v53, v52) )
        {
          v57 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x309BLL;
          ++_fot_area_ptr[v57];
          __writefsdword(0xFFFFFFFC, 0x184Du);
          v56 = 4;
        }
        else
        {
          v54 = 562949953552384LL;
          if ( _bittest64(&v54, v52) )
          {
            v55 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xEA17LL;
            ++_fot_area_ptr[v55];
            __writefsdword(0xFFFFFFFC, 0x750Bu);
            v56 = 1;
          }
          else
          {
            v56 = 2;
            v58 = 4402341478400LL;
            if ( !_bittest64(&v58, v52) )
            {
LABEL_80:
              v93 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xD06BLL;
              ++_fot_area_ptr[v93];
              __writefsdword(0xFFFFFFFC, 0x6835u);
              usage(stderr, 1);
            }
          }
        }
        v59 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x390LL;
        ++_fot_area_ptr[v59];
        __writefsdword(0xFFFFFFFC, 0x1C8u);
        encoding_bytes = v56;
        bfd_init();
        set_default_bfd_target();
        v61 = optind;
        if ( optind >= v4 )
        {
          v65 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x2B01LL;
          ++_fot_area_ptr[v65];
          __writefsdword(0xFFFFFFFC, 0x1580u);
          datasection_only = 0;
          v63 = 0;
          print_strings("{standard input}", stdin, 0LL, 0, 0, v60);
          goto LABEL_77;
        }
        v62 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x1804LL;
        ++_fot_area_ptr[v62];
        __writefsdword(0xFFFFFFFC, 0xC02u);
        v63 = 0;
        v64 = 0;
        break;
      case 64:
        v92 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xB984LL;
        ++_fot_area_ptr[v92];
        __writefsdword(0xFFFFFFFC, 0x5CC2u);
        usage(stderr, 1);
        return result;
      case 73:
      case 105:
        v91 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xD93LL;
        ++_fot_area_ptr[v91];
        __writefsdword(0xFFFFFFFC, 0x6C9u);
        usage(stdout, 0);
        return result;
      case 85:
        v34 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xB841LL;
        ++_fot_area_ptr[v34];
        __writefsdword(0xFFFFFFFC, 0x5C20u);
        target = (char *)optarg;
        goto LABEL_10;
      case 87:
      case 119:
        v17 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xA96BLL;
        ++_fot_area_ptr[v17];
        __writefsdword(0xFFFFFFFC, 0x54B5u);
        print_version("strings");
        return result;
      case 98:
        v28 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xE488LL;
        ++_fot_area_ptr[v28];
        __writefsdword(0xFFFFFFFC, 0x7244u);
        datasection_only = 0;
        goto LABEL_10;
      case 102:
        v36 = __readfsdword(0xFFFFFFFC);
        ++_fot_area_ptr[v36 ^ 0x8515LL];
        __writefsdword(0xFFFFFFFC, 0x428Au);
        v37 = (char *)optarg;
        if ( *(_BYTE *)(optarg + 1) )
        {
          v100 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xE20ELL;
          ++_fot_area_ptr[v100];
          __writefsdword(0xFFFFFFFC, 0x7107u);
          usage(stderr, 1);
        }
        v38 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xE609LL;
        ++_fot_area_ptr[v38];
        __writefsdword(0xFFFFFFFC, 0x7304u);
        encoding[0] = *v37;
        goto LABEL_10;
      case 103:
        v18 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x973BLL;
        ++_fot_area_ptr[v18];
        __writefsdword(0xFFFFFFFC, 0x4B9Du);
        print_filenames = 1;
        goto LABEL_10;
      case 111:
        v19 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xCBE1LL;
        ++_fot_area_ptr[v19];
        __writefsdword(0xFFFFFFFC, 0x65F0u);
        v20 = optarg;
        v21 = *(_BYTE *)optarg;
        v22 = 10;
        v6 = optarg;
        if ( *(_BYTE *)optarg != 48 )
          goto LABEL_36;
        v23 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xB2DELL;
        ++_fot_area_ptr[v23];
        __writefsdword(0xFFFFFFFC, 0x596Fu);
        v21 = *(_BYTE *)(v20 + 1);
        if ( v21 == 120 )
        {
          v24 = __readfsdword(0xFFFFFFFC);
          ++_fot_area_ptr[v24 ^ 0x5562LL];
          __writefsdword(0xFFFFFFFC, 0x2AB1u);
          v11 = (char *)(v20 + 3);
          v21 = *(_BYTE *)(v20 + 2);
          v25 = v21;
          v26 = (v21 & 0xFFFFFFD7) - 65;
          v27 = (unsigned __int8)(v21 - 48) < 0xAu;
          if ( (unsigned __int8)(v21 - 48) < 0xAu || v26 <= 0x19 )
          {
            v46 = __readfsdword(0xFFFFFFFC);
            ++_fot_area_ptr[v46 ^ 0x9D9LL];
            __writefsdword(0xFFFFFFFC, 0x4ECu);
            v9 = 0;
            do
            {
              v47 = __readfsdword(0xFFFFFFFC);
              ++_fot_area_ptr[v47 ^ 0x3B63LL];
              __writefsdword(0xFFFFFFFC, 0x1DB1u);
              v48 = v25 - 48;
              if ( !v27 )
                v48 = v26;
              v9 = 16 * v9 + v48;
              v21 = *v11++;
              v25 = v21;
              v26 = (v21 & 0xFFFFFFD7) - 65;
              v27 = (unsigned __int8)(v21 - 48) < 0xAu;
            }
            while ( (unsigned __int8)(v21 - 48) < 0xAu || v26 < 0x1A );
            goto LABEL_2;
          }
          v6 = v20 + 2;
          v9 = 0;
        }
        else
        {
          v6 = v20 + 1;
          v22 = 8;
LABEL_36:
          v43 = __readfsdword(0xFFFFFFFC);
          ++_fot_area_ptr[v43 ^ 0x7D79LL];
          __writefsdword(0xFFFFFFFC, 0x3EBCu);
          v11 = (char *)(v6 + 1);
          v9 = 0;
          if ( (unsigned __int8)(v21 - 48) <= 9u )
          {
            v44 = __readfsdword(0xFFFFFFFC);
            ++_fot_area_ptr[v44 ^ 0xE8E9LL];
            __writefsdword(0xFFFFFFFC, 0x7474u);
            v9 = 0;
            do
            {
              v45 = __readfsdword(0xFFFFFFFC);
              ++_fot_area_ptr[v45 ^ 0x4C6DLL];
              __writefsdword(0xFFFFFFFC, 0x2636u);
              v9 = v22 * v9 + v21 - 48;
              v21 = *v11++;
            }
            while ( (unsigned __int8)(v21 - 48) < 0xAu );
LABEL_2:
            v6 = (signed __int64)(v11 - 1);
            goto LABEL_3;
          }
        }
LABEL_3:
        v7 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xFACBLL;
        ++_fot_area_ptr[v7];
        __writefsdword(0xFFFFFFFC, 0x7D65u);
        if ( v21 == 66 )
        {
          v10 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x59FELL;
          ++_fot_area_ptr[v10];
          __writefsdword(0xFFFFFFFC, 0x2CFFu);
          v9 <<= 10;
        }
        else if ( v21 == 98 )
        {
          v8 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xEC81LL;
          ++_fot_area_ptr[v8];
          __writefsdword(0xFFFFFFFC, 0x7640u);
          v9 <<= 9;
        }
        else
        {
          v11 = (char *)v6;
        }
        v12 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x9FE6LL;
        ++_fot_area_ptr[v12];
        __writefsdword(0xFFFFFFFC, 0x4FF3u);
        if ( *v11 )
        {
          v94 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x201DLL;
          ++_fot_area_ptr[v94];
          __writefsdword(0xFFFFFFFC, 0x100Eu);
          v95 = dcgettext(0LL, "invalid integer argument %s", 5);
          fatal(v95, v20);
        }
        v13 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x48F7LL;
        ++_fot_area_ptr[v13];
        __writefsdword(0xFFFFFFFC, 0x247Bu);
        string_min = v9;
        v3 = v103;
        v4 = v102;
        if ( v9 <= 0 )
        {
          v96 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x88B7LL;
          ++_fot_area_ptr[v96];
          __writefsdword(0xFFFFFFFC, 0x445Bu);
          v97 = dcgettext(0LL, "invalid number %s", 5);
          fatal(v97, optarg);
        }
LABEL_10:
        v14 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x1848LL;
        ++_fot_area_ptr[v14];
        __writefsdword(0xFFFFFFFC, 0xC24u);
        continue;
      case 112:
        v35 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x99ECLL;
        ++_fot_area_ptr[v35];
        __writefsdword(0xFFFFFFFC, 0x4CF6u);
        print_addresses = 1;
        goto LABEL_27;
      case 117:
        v29 = __readfsdword(0xFFFFFFFC);
        ++_fot_area_ptr[v29 ^ 0x1822LL];
        __writefsdword(0xFFFFFFFC, 0xC11u);
        print_addresses = 1;
        v30 = (char *)optarg;
        if ( *(_BYTE *)(optarg + 1) )
        {
          v98 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x2CC1LL;
          ++_fot_area_ptr[v98];
          __writefsdword(0xFFFFFFFC, 0x1660u);
          usage(stderr, 1);
        }
        v31 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x2A7ELL;
        ++_fot_area_ptr[v31];
        __writefsdword(0xFFFFFFFC, 0x153Fu);
        v32 = *v30;
        if ( v32 == 100 )
        {
          v42 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x4D7ELL;
          ++_fot_area_ptr[v42];
          __writefsdword(0xFFFFFFFC, 0x26BFu);
          address_radix = 10;
        }
        else if ( v32 == 120 )
        {
          v41 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x2FE5LL;
          ++_fot_area_ptr[v41];
          __writefsdword(0xFFFFFFFC, 0x17F2u);
          address_radix = 16;
        }
        else
        {
          if ( v32 != 111 )
          {
            v99 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x5C76LL;
            ++_fot_area_ptr[v99];
            __writefsdword(0xFFFFFFFC, 0x2E3Bu);
            usage(stderr, 1);
          }
          v33 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x23E0LL;
          ++_fot_area_ptr[v33];
          __writefsdword(0xFFFFFFFC, 0x11F0u);
LABEL_27:
          address_radix = 8;
        }
        goto LABEL_10;
      default:
        v39 = __readfsdword(0xFFFFFFFC);
        ++_fot_area_ptr[v39 ^ 0x858BLL];
        __writefsdword(0xFFFFFFFC, 0x42C5u);
        v40 = 10 * string_min;
        if ( string_min < 0 )
          v40 = 0;
        string_min = v16 + v40 - 48;
        goto LABEL_10;
    }
    break;
  }
  do
  {
    v69 = __readfsdword(0xFFFFFFFC);
    ++_fot_area_ptr[v69 ^ 0xA8FDLL];
    __writefsdword(0xFFFFFFFC, 0x547Eu);
    v70 = (char *)v3[v61];
    if ( *v70 == 45 )
    {
      v71 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xE285LL;
      ++_fot_area_ptr[v71];
      __writefsdword(0xFFFFFFFC, 0x7142u);
      if ( !v70[1] )
      {
        v79 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xD513LL;
        ++_fot_area_ptr[v79];
        __writefsdword(0xFFFFFFFC, 0x6A89u);
        datasection_only = 0;
        goto LABEL_75;
      }
    }
    v72 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x8D37LL;
    ++_fot_area_ptr[v72];
    __writefsdword(0xFFFFFFFC, 0x469Bu);
    v64 = 1;
    v68 = 1;
    if ( get_file_size(v70) > 0 )
    {
      v73 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xF78FLL;
      ++_fot_area_ptr[v73];
      __writefsdword(0xFFFFFFFC, 0x7BC7u);
      if ( datasection_only == 1 )
      {
        v74 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xB0A0LL;
        ++_fot_area_ptr[v74];
        __writefsdword(0xFFFFFFFC, 0x5850u);
        v75 = bfd_openr(v70, target);
        if ( v75 )
        {
          v76 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x9A2CLL;
          ++_fot_area_ptr[v76];
          __writefsdword(0xFFFFFFFC, 0x4D16u);
          if ( bfd_check_format(v75, bfd_object) )
          {
            v77 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xEAD8LL;
            ++_fot_area_ptr[v77];
            __writefsdword(0xFFFFFFFC, 0x756Cu);
            got_a_section = 0;
            bfd_map_over_sections(v75, (void (*)(bfd_0 *, asection *, void *))strings_a_section, v70);
            if ( bfd_close(v75) )
            {
              v78 = __readfsdword(0xFFFFFFFC);
              ++_fot_area_ptr[v78 ^ 0x550CLL];
              __writefsdword(0xFFFFFFFC, 0x2A86u);
              v68 = 0;
              if ( got_a_section )
                goto LABEL_74;
            }
            else
            {
              v81 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x51FLL;
              ++_fot_area_ptr[v81];
              __writefsdword(0xFFFFFFFC, 0x28Fu);
              bfd_nonfatal(v70);
            }
          }
          else
          {
            v80 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x1AC8LL;
            ++_fot_area_ptr[v80];
            __writefsdword(0xFFFFFFFC, 0xD64u);
            bfd_close(v75);
          }
        }
      }
      v82 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xD74FLL;
      ++_fot_area_ptr[v82];
      __writefsdword(0xFFFFFFFC, 0x6BA7u);
      v83 = fopen64(v70, "r");
      if ( v83 )
      {
        v85 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x25C7LL;
        ++_fot_area_ptr[v85];
        __writefsdword(0xFFFFFFFC, 0x12E3u);
        v68 = 0;
        print_strings(v70, v83, 0LL, 0, 0, v84);
        if ( fclose(v83) != -1 )
          goto LABEL_74;
        v67 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x3AE6LL;
        ++_fot_area_ptr[v67];
        __writefsdword(0xFFFFFFFC, 0x1D73u);
      }
      else
      {
        v66 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xB3D3LL;
        ++_fot_area_ptr[v66];
        __writefsdword(0xFFFFFFFC, 0x59E9u);
      }
      fprintf(stderr, "%s: ", program_name);
      perror(v70);
      v68 = 1;
    }
LABEL_74:
    v86 = __readfsdword(0xFFFFFFFC);
    ++_fot_area_ptr[v86 ^ 0x9C1ELL];
    __writefsdword(0xFFFFFFFC, 0x4E0Fu);
    v63 |= v68;
    v61 = optind;
    v3 = v103;
    v4 = v102;
LABEL_75:
    v87 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0xE0LL;
    ++_fot_area_ptr[v87];
    __writefsdword(0xFFFFFFFC, 0x70u);
    optind = ++v61;
  }
  while ( v61 < v4 );
  v88 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x6EEFLL;
  ++_fot_area_ptr[v88];
  __writefsdword(0xFFFFFFFC, 0x3777u);
  if ( !v64 )
  {
    v101 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x4732LL;
    ++_fot_area_ptr[v101];
    __writefsdword(0xFFFFFFFC, 0x2399u);
    usage(stderr, 1);
  }
LABEL_77:
  v89 = (signed int)__readfsdword(0xFFFFFFFC) ^ 0x5471LL;
  ++_fot_area_ptr[v89];
  __writefsdword(0xFFFFFFFC, 0x2A38u);
  return v63;
}